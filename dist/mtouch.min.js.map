{"version":3,"file":"mtouch.min.js","sources":["../src/utils.js","../src/handlerBus.js","../src/index.js"],"sourcesContent":["export default {\n    getLength(v1) {\n        if (typeof v1 !== 'object') {\n            console.error('getLength error!');\n            return;\n        }\n        return Math.sqrt(v1.x * v1.x + v1.y * v1.y);\n    },\n    getAngle(v1, v2) {\n        if (typeof v1 !== 'object' || typeof v2 !== 'object') {\n            console.error('getAngle error!');\n            return;\n        }\n        let direction = v1.x * v2.y - v2.x * v1.y > 0 ? 1: -1,\n            len1 = this.getLength(v1),\n            len2 = this.getLength(v2),\n            mr = len1 * len2,\n            dot,r;\n        if (mr === 0)return 0;\n        dot = v1.x * v2.x + v1.y * v2.y;\n        r = dot / mr;\n        if (r > 1)r = 1;\n        if (r < -1)r = -1;\n        return Math.acos(r) * direction * 180 / Math.PI;\n    },\n    getBasePoint(el) {\n        if (!el) {\n            console.error('getBasePoint error!');\n            return;\n        }\n        let offset = this.getOffset(el);\n        let x = offset.left + el.getBoundingClientRect().width / 2,\n            y = offset.top + el.getBoundingClientRect().width / 2;\n        return {x: Math.round(x), y: Math.round(y)};\n    },\n    setPos(el, transform) {\n        let str = JSON.stringify(transform);\n        let value = `translate3d(${transform.x}px,${transform.y}px,0px) scale(${transform.scale}) rotate(${transform.rotate}deg)`;\n        el = typeof el == 'string'? document.querySelector(el): el;\n        el.style.transform = value;\n        el.setAttribute('data-mtouch-status', str);\n    },\n    getPos(el) {\n        let defaulTrans;\n        let cssTrans = window.getComputedStyle(el,null).transform;\n        if(window.getComputedStyle && cssTrans !== 'none'){\n            defaulTrans = this.matrixTo(cssTrans);\n        }else{\n            defaulTrans = {\n                x: 0,\n                y: 0,\n                scale: 1,\n                rotate: 0,\n            };\n        }\n        return JSON.parse(el.getAttribute('data-mtouch-status')) || defaulTrans;\n    },\n    extend(obj1, obj2) {\n        for (let k in obj2) {\n            if (obj2.hasOwnProperty(k)) {\n                if(typeof obj2[k] == 'object'){\n                    if(typeof obj1[k] !== 'object'){\n                        obj1[k] = {};\n                    }\n                    this.extend(obj1[k],obj2[k]);\n                }else{\n                    obj1[k] = obj2[k];\n                }\n            }\n        }\n        return obj1;\n    },\n    getVector(p1, p2) {\n        if (typeof p1 !== 'object' || typeof p2 !== 'object' ) {\n            console.error('getvector error!');\n            return;\n        }\n        let x = Math.round(p1.x - p2.x),\n            y = Math.round(p1.y - p2.y);\n        return { x, y };\n    },\n    getPoint(ev, index) {\n        if (!ev || !ev.touches[index]) {\n            console.error('getPoint error!');\n            return;\n        }\n        return {\n            x: Math.round(ev.touches[index].pageX),\n            y: Math.round(ev.touches[index].pageY),\n        };\n    },\n    getOffset(el){\n        el = typeof el == 'string'? document.querySelector(el): el;\n        let rect = el.getBoundingClientRect();\n        let offset = {\n            left:rect.left + document.body.scrollLeft,\n            top:rect.top + document.body.scrollTop,\n            width:el.offsetWidth,\n            height:el.offsetHeight,\n        };\n        return offset;\n    },\n    matrixTo(matrix){\n        let arr = (matrix.replace('matrix(','').replace(')','')).split(',');\n        let cos = arr[0],\n            sin = arr[1],\n            tan = sin / cos,\n            rotate = Math.atan( tan ) * 180 / Math.PI,\n            scale = cos / ( Math.cos( Math.PI / 180 * rotate )),\n            trans;\n        trans = {\n            x:parseInt(arr[4]),\n            y:parseInt(arr[5]),\n            scale,\n            rotate,\n        };\n        return trans;\n    },\n};\n","export default class HandlerBus{\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    };\n    add(handler){\n        this.handlers.push(handler);\n        return this;\n    };\n    del(handler){\n        if(!handler){\n            this.handlers = [];\n        }else{\n            this.handlers.forEach((value,index)=>{\n                if(value === handler){\n                    this.handlers.splice(index,1);\n                }\n            });\n        }\n        return this;\n    };\n    fire(){\n        if(!this.handlers || !this.handlers.length === 0)return;\n        this.handlers.forEach(handler=>{\n            if(typeof handler === 'function') handler.apply(this.el, arguments);\n        })\n        return this;\n    };\n}\n","import _ from './utils';\nimport HandlerBus from './handlerBus';\n\nconst EVENT = [\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'drag',\n    'dragstart',\n    'dragend',\n    'pinch',\n    'pinchstart',\n    'pinchend',\n    'rotate',\n    'rotatestart',\n    'rotatend',\n];\n\nconst ORIGINEVENT = [\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'touchcancel',\n];\n\nexport default class MTouch {\n    constructor(options) {\n        this.ops = {\n            // config:\n            receiver: null,\n            operator: null,\n\n            // event\n            touchstart() {},\n            touchmove() {},\n            touchend() {},\n\n            drag() {},\n            dragstart() {},\n            dragend() {},\n\n            pinch() {},\n            pinchstart() {},\n            pinchend() {},\n\n            rotate() {},\n            rotatestart() {},\n            rotatend() {},\n\n            singlePinch:{\n                start(){},\n                pinch(){},\n                end(){},\n                buttonId:null,\n            },\n\n            singleRotate:{\n                start(){},\n                rotate(){},\n                end(){},\n                buttonId:null,\n            },\n        };\n\n        // 开关；\n        this.use = {\n            drag: !!options.drag || !!options.dragstart || !!options.dragend,\n            pinch: !!options.pinch || !!options.pinchstart || !!options.pinchend,\n            rotate: !!options.rotate || !!options.rotatestart || !!options.rotateend,\n            singlePinch: !!options.singlePinch && !!options.singlePinch.buttonId,\n            singleRotate: !!options.singleRotate && !!options.singleRotate.buttonId,\n        };\n\n        this.ops = _.extend(this.ops, options);\n\n        // receiver test;\n        if(!this.ops.receiver || typeof this.ops.receiver !== 'string'){\n            console.error('receiver error,there must be a receiver-selector');\n            return;\n        }\n        // 事件接收器；\n        this.receiver = document.querySelector(this.ops.receiver);\n\n        // 事件操纵器；\n        if (this.ops.operator) {\n            if(typeof this.ops.operator !== 'string'){\n                console.error('operator error, the operator param must be a selector');\n                return;\n            }\n            this.operator = document.querySelector(this.ops.operator);\n        } else {\n            this.operator = this.receiver;\n        }\n\n\n        // touch状态；\n        this.fingers = 0;\n        // 初始状态;\n        this.draging = this.pinching = this.rotating = this.singleRotating = this.singlePinching = false;\n\n        this.startScale = 1;\n        this.startPoint = {};\n        this.secondPoint = {};\n        this.pinchStartLength = null;\n        this.singlePinchStartLength = null;\n        this.vector1 = {};\n        this.singleBasePoint = {};\n        // eventbus\n        this.driveBus();\n        this.bind();\n    }\n    driveBus() {\n        EVENT.forEach(eventName => {\n            this[eventName] = new HandlerBus(this.receiver).add(this.ops[eventName] || function(){});\n        });\n        this.singlePinchstart = new HandlerBus(this.receiver).add(this.ops.singlePinch.start || function(){});\n        this.singlePinch = new HandlerBus(this.receiver).add(this.ops.singlePinch.pinch || function(){});\n        this.singlePinchend = new HandlerBus(this.receiver).add(this.ops.singlePinch.end || function(){});\n        this.singleRotatestart = new HandlerBus(this.receiver).add(this.ops.singleRotate.start || function(){});\n        this.singleRotate = new HandlerBus(this.receiver).add(this.ops.singleRotate.rotate || function(){});\n        this.singleRotatend = new HandlerBus(this.receiver).add(this.ops.singleRotate.end || function(){});\n    }\n    bind() {\n        ORIGINEVENT.forEach(evName => {\n            let fn = evName == 'touchcancel'? 'end': evName.replace('touch', '');\n            // 需要存下 bind(this) 后的函数指向，用于 destroy;\n            this[fn+'bind'] = this[fn].bind(this);\n            this.receiver.addEventListener(evName, this[fn+'bind'], false);\n        });\n    }\n    destroy(){\n        ORIGINEVENT.forEach(evName => {\n            let fn = evName == 'touchcancel'? 'end': evName.replace('touch', '');\n            this.receiver.removeEventListener(evName, this[fn+'bind'], false);\n        });\n    }\n    start(ev) {\n        if (!ev.touches || ev.type !== 'touchstart')return;\n\n        this.fingers = ev.touches.length;\n        this.startPoint = _.getPoint(ev, 0);\n        this.singleBasePoint = _.getBasePoint(this.operator);\n\n        if (this.fingers > 1) {\n            this.secondPoint = _.getPoint(ev, 1);\n            this.vector1 = _.getVector(this.secondPoint, this.startPoint);\n            this.pinchStartLength = _.getLength(this.vector1);\n        } else if (this.use.singlePinch) {\n            let pinchV1 = _.getVector(this.startPoint, this.singleBasePoint);\n            this.singlePinchStartLength = _.getLength(pinchV1);\n        }\n\n        this.touchstart.fire({\n            origin : ev,\n            eventType:'touchstart',\n        });\n    }\n    move(ev) {\n        if (!ev.touches || ev.type !== 'touchmove')return;\n        let curPoint = _.getPoint(ev, 0);\n        let curFingers = ev.touches.length;\n        let rotateV1,\n            rotateV2,\n            pinchV2,\n            pinchLength,\n            singlePinchLength;\n\n        // 当从原先的两指到一指的时候，可能会出现基础手指的变化，导致跳动；\n        // 因此需屏蔽掉一次错误的touchmove事件，待重新设置基础指后，再继续进行；\n        if (curFingers < this.fingers) {\n            this.startPoint = curPoint;\n            this.fingers = curFingers;\n            return;\n        }\n\n        // 两指先后触摸时，只会触发第一指一次touchstart，第二指不会再次触发touchstart；\n        // 因此会出现没有记录第二指状态，需要在touchmove中重新获取参数；\n        if (curFingers > 1 && (!this.secondPoint || !this.vector1 || !this.pinchStartLength)) {\n            this.secondPoint = _.getPoint(ev, 1);\n            this.vector1 = _.getVector(this.secondPoint, this.startPoint);\n            this.pinchStartLength = _.getLength(this.vector1);\n        }\n\n        // 双指时，需触发pinch和rotate事件；\n        if (curFingers > 1) {\n            let curSecPoint = _.getPoint(ev, 1);\n            let vector2 = _.getVector(curSecPoint, curPoint);\n            // pinch\n            if (this.use.pinch) {\n                pinchLength = _.getLength(vector2);\n                this.eventFire('pinch', {\n                    delta:{\n                        scale: pinchLength / this.pinchStartLength,\n                    },\n                    origin:ev,\n                });\n                this.pinchStartLength = pinchLength;\n            }\n            // rotate\n            if (this.use.rotate) {\n                this.eventFire('rotate', {\n                    delta:{\n                        rotate: _.getAngle(this.vector1, vector2),\n                    },\n                    origin:ev,\n                });\n                this.vector1 = vector2;\n            }\n        } else {\n            // singlePinch;\n            if (this.use.singlePinch && ev.target.id == this.ops.singlePinch.buttonId) {\n                pinchV2 = _.getVector(curPoint, this.singleBasePoint);\n                singlePinchLength = _.getLength(pinchV2);\n                this.eventFire('singlePinch', {\n                    delta:{\n                        scale: singlePinchLength / this.singlePinchStartLength,\n                    },\n                    origin:ev,\n                });\n                this.singlePinchStartLength = singlePinchLength;\n            }\n            // singleRotate;\n            if (this.use.singleRotate && ev.target.id == this.ops.singleRotate.buttonId) {\n                rotateV1 = _.getVector(this.startPoint, this.singleBasePoint);\n                rotateV2 = _.getVector(curPoint, this.singleBasePoint);\n                this.eventFire('singleRotate', {\n                    delta:{\n                        rotate: _.getAngle(rotateV1, rotateV2),\n                    },\n                    origin:ev,\n                });\n            }\n        }\n        if (this.use.drag) {\n            if (ev.target.id !== this.ops.singlePinch.buttonId && ev.target.id !== this.ops.singleRotate.buttonId) {\n                this.eventFire('drag', {\n                    delta:{\n                        deltaX: curPoint.x - this.startPoint.x,\n                        deltaY: curPoint.y - this.startPoint.y,\n                    },\n                    origin:ev,\n                });\n            }\n        }\n        this.startPoint = curPoint;\n        this.touchmove.fire({\n            eventType:'touchmove',\n            origin:ev,\n        });\n        ev.preventDefault();\n    }\n    end(ev) {\n        if (!ev.touches && ev.type !== 'touchend' && ev.type !== 'touchcancel')\n            return;\n\n        ['pinch', 'drag', 'rotate', 'singleRotate', 'singlePinch'].forEach(evName => {\n            this.eventEnd(evName, {\n                origin:ev,\n            });\n        });\n        this.touchend.fire({\n            eventType:'touchend',\n            origin:ev,\n        });\n    }\n    eventFire(evName, ev) {\n        let ing = `${evName}ing`;\n        let start = `${evName}start`;\n        if (!this[ing]) {\n            ev.eventType = start;\n            this[start].fire(ev);\n            this[ing] = true;\n        } else {\n            ev.eventType = evName;\n            this[evName].fire(ev);\n        }\n    }\n    eventEnd(evName, ev) {\n        let ing = `${evName}ing`;\n        let end;\n        if (evName == 'rotate' || evName == 'singleRotate') {\n            end = `${evName}nd`;\n        } else {\n            end = `${evName}end`;\n        }\n        if (this[ing]) {\n            ev.eventType = end;\n            this[end].fire(ev);\n            this[ing] = false;\n        }\n    }\n    switchOperator(el) {\n        this.operator = el;\n    }\n    on(evName, handler) {\n        this[evName] && this[evName].add(handler);\n    }\n    off(evName, handler) {\n        this[evName] && this[evName].del(handler);\n    }\n}\n"],"names":["v1","error","Math","sqrt","x","y","v2","direction","len1","this","getLength","len2","mr","dot","r","acos","PI","el","offset","getOffset","left","getBoundingClientRect","width","top","round","transform","str","JSON","stringify","value","scale","rotate","document","querySelector","style","setAttribute","defaulTrans","cssTrans","window","getComputedStyle","matrixTo","parse","getAttribute","obj1","obj2","k","hasOwnProperty","_typeof","extend","p1","p2","ev","index","touches","pageX","pageY","rect","body","scrollLeft","scrollTop","offsetWidth","offsetHeight","matrix","arr","replace","split","cos","sin","tan","atan","parseInt","HandlerBus","handlers","handler","push","forEach","splice","length","apply","_this2","EVENT","ORIGINEVENT","options","ops","use","drag","dragstart","dragend","pinch","pinchstart","pinchend","rotatestart","rotateend","singlePinch","buttonId","singleRotate","_","receiver","operator","fingers","draging","pinching","rotating","singleRotating","singlePinching","startScale","startPoint","secondPoint","pinchStartLength","singlePinchStartLength","vector1","singleBasePoint","driveBus","bind","eventName","_this","add","singlePinchstart","start","singlePinchend","end","singleRotatestart","singleRotatend","fn","evName","addEventListener","removeEventListener","_this3","type","getPoint","getBasePoint","getVector","pinchV1","touchstart","fire","curPoint","curFingers","rotateV1","rotateV2","pinchV2","pinchLength","singlePinchLength","curSecPoint","vector2","eventFire","getAngle","target","id","touchmove","preventDefault","eventEnd","touchend","ing","eventType","del"],"mappings":"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"}